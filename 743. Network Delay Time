Ques : You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges
times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.
We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. 
If it is impossible for all the n nodes to receive the signal, return -1.

Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1

Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1
 
Constraints:
1 <= k <= n <= 100
1 <= times.length <= 6000
times[i].length == 3
1 <= ui, vi <= n
ui != vi
0 <= wi <= 100
All the pairs (ui, vi) are  unique. (i.e., no multiple edges.)

Solution: 
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>> graph(n+1);
        vector<int> dist(n+1,INT_MAX);
        dist[0] = 0;
        //now we will create ajacency list cotaining connected node and weight
        for(int i=0;i<times.size();i++){
            graph[times[i][0]].push_back({times[i][1],times[i][2]});
        }
        queue<int> q;
        dist[k] = 0;
        q.push(k);
        while(!q.empty()){
            int curr = q.front();
            q.pop();
            for(pair<int,int> p : graph[curr]){
                int next = p.first;
                int time = p.second;
                if(dist[next] > dist[curr] + time){
                    dist[next] = dist[curr] + time;
                     q.push(next);
                }
            }
        }
        int ans = *max_element(dist.begin(),dist.end());
        return (ans==INT_MAX ? -1 : ans);
    }
};
