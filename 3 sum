Ques Link : https://leetcode.com/problems/3sum/
Ques : Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and
nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:
Input: nums = []
Output: []

Example 3:
Input: nums = [0]
Output: []

Constraints:
0 <= nums.length <= 3000
-105 <= nums[i] <= 105

Solution Link: https://www.youtube.com/watch?v=onLoX6Nhvmg
Solution : 
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> v(3,0);
        int n = nums.size();
        sort(nums.begin(),nums.end());
        if(n<3) return ans;
        //two pointer method using technique a+b = -c;
        for(int i=0;i<n-2;i++){
           if(i==0 || (i>0 && nums[i] !=nums[i-1])){
               int lo = i+1,hi = n-1,sum = 0 - nums[i];
               while(lo < hi){
                   if(nums[lo] + nums[hi] == sum){
                       v[0]=nums[i];
                       v[1]=nums[lo];
                       v[2]= nums[hi];
                       ans.push_back(v);
                       while(lo< hi && nums[lo] == nums[lo+1]) lo++;
                       while(lo<hi && nums[hi] == nums[hi-1]) hi--;
                       lo++;hi--;
                   }
                   else if(nums[lo] + nums[hi] < sum) lo++;
                   else hi--;
               }
           }
        }
             
        // (O(n^2 * log(n))) approach
        // unordered_map<int,int> m;
        // map<vector<int>,int> s;
        // for(int i=0;i<n;i++){
        //     m[nums[i]]++;
        // }
        // for(int i=0;i<n;i++){
        //     m[nums[i]]--;
        //     for(int j=n-1;j>i;j--){
        //     m[nums[j]]--;
        //     int k = 0 - (nums[i] + nums[j]);
        //     if(m[k] > 0){
        //         v[0] = nums[i];
        //         v[1] = nums[j];
        //         v[2] = k;
        //         sort(v.begin(),v.end());
        //         if(s[v]==0)
        //             ans.push_back(v);
        //         s[v]++;
        //     }
        //     m[nums[j]]++;
        // }
        //     m[nums[i]]++;
        // }
        return ans;
    }
};
